{"version":3,"sources":["features/grid/gridSlice.js","features/score/scoreSlice.js","features/grid/GridSquare.js","features/grid/gridSearch.js","features/grid/Grid.js","features/score/Score.js","features/gameover/Gameover.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["gridDefault","array","row","push","col","number","Math","floor","random","gridSlice","createSlice","name","initialState","reducers","createNewArray","state","deleteSelected","action","payload","length","i","slice","lowerTheRest","selectGrid","grid","actions","scoreSlice","value","incrementByAmount","resetValue","selectScore","score","GridSquare","props","dispatch","useDispatch","classes","color","className","onClick","squaresToDelete","index","concat","listOfIndexes","nodes","newIndex","node","includes","parseInt","toString","shift","GridSearch","id","charAt","console","log","Grid","useSelector","key","Score","Gameover","useState","con","setCon","useEffect","connections","calculateIfGameOver","App","configureStore","reducer","gridReducer","scoreReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef623a85.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst gridDefault = () => {\r\n  const rows = 5\r\n  const cols = 5\r\n  const array = []\r\n\r\n  for (let row = 0; row < rows; row++) {\r\n    array.push([])\r\n    for (let col = 0; col < cols; col++) {\r\n      let number = Math.floor(Math.random() * 6) + 1  \r\n      array[row].push(number)\r\n    }\r\n  }\r\n\r\n  return array\r\n}\r\nconst array  = gridDefault();\r\n\r\n\r\n\r\nexport const gridSlice = createSlice({\r\n    name: 'grid',\r\n    initialState: {\r\n      array,\r\n    },\r\n    reducers: {\r\n      createNewArray: (state) => {\r\n        state.array = gridDefault();\r\n      },\r\n      deleteSelected: (state, action) => {\r\n        // if in array is only one square do nothing\r\n        if ( action.payload.length > 1) {\r\n          // replace every square from the array by 0\r\n          for (let i = 0; i < action.payload.length; i++) {\r\n            state.array[action.payload[i].slice(0,1)][action.payload[i].slice(1,2)] = 0\r\n          }\r\n        }\r\n      },\r\n      lowerTheRest: (state, action) => {\r\n        // if in array is only one square do nothing\r\n        if ( action.payload.length > 1) {\r\n          // iterate on every square element  \r\n          for (let row = 4; row > -1; row--) {\r\n            for (let col = 0; col < 5; col++) {\r\n              // if current square is \"deleted\" go further\r\n              if (state.array[row][col] === 0) {\r\n                \r\n                // if current square row equals 0 => generate random square\r\n                if (row === 0) {\r\n                  state.array[row][col] = Math.floor(Math.random() * 6) + 1  \r\n                }\r\n\r\n                let i = 1\r\n    \r\n                while (state.array[row][col] === 0 ) {\r\n                  // if there is no square above generete new square\r\n                  if (row - i === -1) {\r\n                    state.array[row][col] = Math.floor(Math.random() * 6) + 1  \r\n                  }\r\n                  // if square at row (-i) above current square is deleted go higher\r\n                  if (row - i > -1 ? state.array[row - i][col] === 0  : false) {\r\n                    i++\r\n                  }\r\n                  // if square at row (-i) above current square is not deleted replace them\r\n                  if (row - i > -1 ? state.array[row - i][col] !== 0 : false) {\r\n                    state.array[row][col] = state.array[row - i][col]\r\n                    state.array[row - i][col] = 0\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n    },\r\n  });\r\n\r\n  \r\n\r\n  export const selectGrid = state => state.grid.array;\r\n  \r\n  export const { deleteSelected, lowerTheRest, createNewArray} = gridSlice.actions;\r\n\r\n  export default gridSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const scoreSlice = createSlice({\r\n  name: 'score',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    incrementByAmount: (state, action) => {\r\n        if (action.payload > 1) {\r\n            state.value += action.payload;\r\n        }\r\n    },\r\n    resetValue: (state) => {\r\n        state.value = 0;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { incrementByAmount, resetValue } = scoreSlice.actions;\r\n\r\nexport const selectScore = state => state.score.value;\r\n\r\nexport default scoreSlice.reducer;\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteSelected, lowerTheRest } from './gridSlice';\r\nimport { incrementByAmount } from '../score/scoreSlice';\r\nimport GridSearch from './gridSearch';\r\n\r\n\r\nexport default function GridSquare(props) {\r\n  const dispatch = useDispatch(); \r\n  const classes = `grid-square color-${props.color}`\r\n\r\n  const handleClick = () => {\r\n    let squaresToDelete = GridSearch(props.id.toString().charAt(0), props.id.toString().charAt(1), props.array)\r\n    console.log(squaresToDelete)\r\n    dispatch(deleteSelected(squaresToDelete));\r\n    dispatch(incrementByAmount(squaresToDelete.length))\r\n    dispatch(lowerTheRest(squaresToDelete));\r\n  }\r\n\r\n\r\n  return <div className={classes} onClick={handleClick}/>\r\n}","\r\nexport default function GridSearch(row, col, array) {\r\n    \r\n    let index = row.concat(col)\r\n    let listOfIndexes = [];\r\n    let nodes = [];\r\n    let newIndex = '';\r\n\r\n    nodes.push(index)\r\n\r\n    while(nodes.length > 0) {\r\n        let node = nodes[0];\r\n        let row  = node.slice(0,1);\r\n        let col = node.slice(1,2);\r\n\r\n        let index = row.concat(col)\r\n\r\n        // if index is already in the array it won't be added\r\n        if (!listOfIndexes.includes(index)){\r\n            listOfIndexes.push(index)\r\n        }\r\n        \r\n        //console.log(listOfIndexes);\r\n\r\n        // check if block above/below/leftside/rightside is in the array\r\n\r\n        if (parseInt(row) - 1 !== -1 ? (array[row][col] === array[parseInt(row) - 1][col] && !listOfIndexes.includes((parseInt(row) - 1).toString().concat(col))) : false) {\r\n            //console.log('up')\r\n            newIndex = ((parseInt(row) - 1).toString()).concat(col)\r\n            nodes.push(newIndex)\r\n            \r\n        }\r\n        if (parseInt(row) + 1 !== 5 ? (array[row][col] === array[parseInt(row) + 1][col] && !listOfIndexes.includes((parseInt(row) + 1).toString().concat(col))) : false) {\r\n            //console.log('down')\r\n            newIndex = ((parseInt(row) + 1).toString()).concat(col)\r\n            nodes.push(newIndex)\r\n            \r\n        }\r\n        if (parseInt(col) - 1 !== -1 ? (array[row][col] === array[row][parseInt(col) - 1] && !listOfIndexes.includes(((row).concat(parseInt(col) - 1)).toString())) : false) {\r\n            //console.log('left')\r\n            newIndex = (row).concat((parseInt(col) - 1).toString())\r\n            nodes.push(newIndex)\r\n            \r\n        }\r\n        if (parseInt(col) + 1 !== 5 ? (array[row][col] === array[row][parseInt(col) + 1] && !listOfIndexes.includes(((row).concat(parseInt(col) + 1)).toString())) : false) {\r\n            //console.log('right')\r\n            newIndex = (row).concat((parseInt(col) + 1).toString())\r\n            nodes.push(newIndex)\r\n            \r\n        }\r\n\r\n        nodes.shift();\r\n    }\r\n\r\n    return listOfIndexes;\r\n}","import React from 'react'\r\nimport Gridsquare from './GridSquare';\r\nimport { useSelector  } from 'react-redux';\r\nimport { selectGrid } from './gridSlice';\r\n\r\n\r\nexport default function Grid() {\r\n    const array = useSelector(selectGrid);\r\n\r\n    const grid = [] \r\n    for (let row = 0; row < 5; row ++) {\r\n        grid.push([])\r\n        for (let col = 0; col < 5; col ++) {\r\n            grid[row].push(<Gridsquare key={`${row}${col}`} color={array[row][col]} id={`${row}${col}`} array={array}/>)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"grid-wrap\">\r\n            <div className='grid-board'>\r\n                {grid}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useSelector  } from 'react-redux';\r\nimport { selectScore } from './scoreSlice';\r\n\r\nexport default function Score() {\r\n    const score = useSelector(selectScore);\r\n    return (<h1>{score}</h1>)\r\n}\r\n","import React, {useState, useEffect} from 'react'\r\nimport { useSelector, useDispatch  } from 'react-redux';\r\nimport { selectGrid, createNewArray } from '../grid/gridSlice';\r\nimport { selectScore, resetValue } from '../score/scoreSlice';\r\n\r\nexport default function Gameover() {\r\n    const dispatch = useDispatch()\r\n    const [con, setCon] = useState(0)\r\n    const array = useSelector(selectGrid)\r\n    const score = useSelector(selectScore)\r\n\r\n\r\n    const calculateIfGameOver = (array) => {\r\n        let connections = 0\r\n        for (let row = 0; row < 5; row++) {\r\n            for (let col = 0; col < 5; col++) {\r\n                if (row + 1 < 5 ? array[row][col] === array[row + 1][col] : false) connections++;\r\n                if (row - 1 > -1 ? array[row][col] === array[row - 1][col] : false) connections++;\r\n                if (col + 1 < 5 ? array[row][col] === array[row][col + 1] : false) connections++;\r\n                if (col - 1 > -1 ? array[row][col] === array[row][col - 1] : false) connections++;\r\n            }\r\n        }\r\n        setCon(connections)\r\n    }\r\n\r\n    const handleClick = () => {\r\n        dispatch(resetValue());\r\n        dispatch(createNewArray());\r\n    }\r\n\r\n    useEffect(() => {\r\n        calculateIfGameOver(array);\r\n    }, [array])\r\n\r\n    return (\r\n        <div className={!con && score !== 0 ? \"gameover-panel\" : \"gameover-panel-hide\"}>\r\n            {!con && score !== 0 && <h1 className=\"gameover-h\">Game over<br/>Your score: {score}</h1>}\r\n            <button className=\"play-again-btn\" onClick={handleClick}>Play Again!</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Grid from './features/grid/Grid'\r\nimport Score from './features/score/Score'\r\nimport Gameover from './features/gameover/Gameover'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Score />\r\n        <Grid />\r\n        <Gameover />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport gridReducer from '../features/grid/gridSlice';\r\nimport scoreReducer from '../features/score/scoreSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    grid: gridReducer,\r\n    score: scoreReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}