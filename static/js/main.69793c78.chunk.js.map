{"version":3,"sources":["features/grid/gridSlice.js","features/score/scoreSlice.js","features/grid/GridSquare.js","features/grid/gridSearch.js","features/grid/Grid.js","features/score/Score.js","features/gameover/Gameover.js","App.js","app/store.js","index.js"],"names":["gridDefault","array","row","push","col","number","Math","floor","random","gridSlice","createSlice","name","initialState","reducers","createNewArray","state","deleteSelected","action","payload","length","i","slice","lowerTheRest","selectGrid","grid","actions","scoreSlice","value","incrementByAmount","resetValue","selectScore","score","GridSquare","props","dispatch","useDispatch","classes","color","className","onClick","squaresToDelete","index","concat","listOfIndexes","nodes","newIndex","node","includes","parseInt","toString","shift","GridSearch","id","charAt","Grid","useSelector","key","Score","Gameover","useState","possibleMove","setPossibleMove","useEffect","calculateIfGameOver","App","configureStore","reducer","gridReducer","scoreReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.69793c78.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst gridDefault = () => {\r\n  const rows = 5;\r\n  const cols = 5;\r\n  const array = [];\r\n\r\n  for (let row = 0; row < rows; row++) {\r\n    array.push([]);\r\n    for (let col = 0; col < cols; col++) {\r\n      let number = Math.floor(Math.random() * 6) + 1;\r\n      array[row].push(number);\r\n    }\r\n  }\r\n\r\n  return array;\r\n};\r\nconst array = gridDefault();\r\n\r\nexport const gridSlice = createSlice({\r\n  name: 'grid',\r\n  initialState: {\r\n    array,\r\n  },\r\n  reducers: {\r\n    createNewArray: (state) => {\r\n      state.array = gridDefault();\r\n    },\r\n    deleteSelected: (state, action) => {\r\n      // if in array is only one square do nothing\r\n      if (action.payload.length > 1) {\r\n        // replace every square from the array by 0\r\n        for (let i = 0; i < action.payload.length; i++) {\r\n          state.array[action.payload[i].slice(0, 1)][\r\n            action.payload[i].slice(1, 2)\r\n          ] = 0;\r\n        }\r\n      }\r\n    },\r\n    lowerTheRest: (state, action) => {\r\n      // if in array is only one square do nothing\r\n      if (action.payload.length > 1) {\r\n        // iterate on every square element\r\n        for (let row = 4; row > -1; row--) {\r\n          for (let col = 0; col < 5; col++) {\r\n            // if current square is \"deleted\" go further\r\n            if (state.array[row][col] === 0) {\r\n              // if current square row equals 0 => generate random square\r\n              if (row === 0) {\r\n                state.array[row][col] = Math.floor(Math.random() * 6) + 1;\r\n              }\r\n\r\n              let i = 1;\r\n\r\n              while (state.array[row][col] === 0) {\r\n                // if there is no square above generete new square\r\n                if (row - i === -1) {\r\n                  state.array[row][col] = Math.floor(Math.random() * 6) + 1;\r\n                }\r\n                // if square at row (-i) above current square is deleted go higher\r\n                if (row - i > -1 ? state.array[row - i][col] === 0 : false) {\r\n                  i++;\r\n                }\r\n                // if square at row (-i) above current square is not deleted replace them\r\n                if (row - i > -1 ? state.array[row - i][col] !== 0 : false) {\r\n                  state.array[row][col] = state.array[row - i][col];\r\n                  state.array[row - i][col] = 0;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const selectGrid = (state) => state.grid.array;\r\n\r\nexport const {\r\n  deleteSelected,\r\n  lowerTheRest,\r\n  createNewArray,\r\n} = gridSlice.actions;\r\n\r\nexport default gridSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const scoreSlice = createSlice({\r\n  name: 'score',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    incrementByAmount: (state, action) => {\r\n      if (action.payload > 1) {\r\n        state.value += action.payload;\r\n      }\r\n    },\r\n    resetValue: (state) => {\r\n      state.value = 0;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { incrementByAmount, resetValue } = scoreSlice.actions;\r\n\r\nexport const selectScore = (state) => state.score.value;\r\n\r\nexport default scoreSlice.reducer;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteSelected, lowerTheRest } from './gridSlice';\r\nimport { incrementByAmount } from '../score/scoreSlice';\r\nimport GridSearch from './gridSearch';\r\n\r\nexport default function GridSquare(props) {\r\n  const dispatch = useDispatch();\r\n  const classes = `grid-square color-${props.color}`;\r\n\r\n  const handleClick = () => {\r\n    let squaresToDelete = GridSearch(\r\n      props.id.toString().charAt(0),\r\n      props.id.toString().charAt(1),\r\n      props.array\r\n    );\r\n    dispatch(deleteSelected(squaresToDelete));\r\n    dispatch(incrementByAmount(squaresToDelete.length));\r\n    dispatch(lowerTheRest(squaresToDelete));\r\n  };\r\n\r\n  return <div className={classes} onClick={handleClick} />;\r\n}\r\n","export default function GridSearch(row, col, array) {\r\n  let index = row.concat(col);\r\n  let listOfIndexes = [];\r\n  let nodes = [];\r\n  let newIndex = '';\r\n\r\n  nodes.push(index);\r\n\r\n  while (nodes.length > 0) {\r\n    let node = nodes[0];\r\n    let row = node.slice(0, 1);\r\n    let col = node.slice(1, 2);\r\n\r\n    let index = row.concat(col);\r\n\r\n    if (!listOfIndexes.includes(index)) {\r\n      listOfIndexes.push(index);\r\n    }\r\n\r\n    if (\r\n      parseInt(row) - 1 !== -1\r\n        ? array[row][col] === array[parseInt(row) - 1][col] &&\r\n          !listOfIndexes.includes((parseInt(row) - 1).toString().concat(col))\r\n        : false\r\n    ) {\r\n      newIndex = (parseInt(row) - 1).toString().concat(col);\r\n      nodes.push(newIndex);\r\n    }\r\n    if (\r\n      parseInt(row) + 1 !== 5\r\n        ? array[row][col] === array[parseInt(row) + 1][col] &&\r\n          !listOfIndexes.includes((parseInt(row) + 1).toString().concat(col))\r\n        : false\r\n    ) {\r\n      newIndex = (parseInt(row) + 1).toString().concat(col);\r\n      nodes.push(newIndex);\r\n    }\r\n    if (\r\n      parseInt(col) - 1 !== -1\r\n        ? array[row][col] === array[row][parseInt(col) - 1] &&\r\n          !listOfIndexes.includes(row.concat(parseInt(col) - 1).toString())\r\n        : false\r\n    ) {\r\n      newIndex = row.concat((parseInt(col) - 1).toString());\r\n      nodes.push(newIndex);\r\n    }\r\n    if (\r\n      parseInt(col) + 1 !== 5\r\n        ? array[row][col] === array[row][parseInt(col) + 1] &&\r\n          !listOfIndexes.includes(row.concat(parseInt(col) + 1).toString())\r\n        : false\r\n    ) {\r\n      newIndex = row.concat((parseInt(col) + 1).toString());\r\n      nodes.push(newIndex);\r\n    }\r\n    nodes.shift();\r\n  }\r\n  return listOfIndexes;\r\n}\r\n","import React from 'react';\r\nimport Gridsquare from './GridSquare';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectGrid } from './gridSlice';\r\n\r\nexport default function Grid() {\r\n  const array = useSelector(selectGrid);\r\n\r\n  const grid = [];\r\n  for (let row = 0; row < 5; row++) {\r\n    grid.push([]);\r\n    for (let col = 0; col < 5; col++) {\r\n      grid[row].push(\r\n        <Gridsquare\r\n          key={`${row}${col}`}\r\n          color={array[row][col]}\r\n          id={`${row}${col}`}\r\n          array={array}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"grid-wrap\">\r\n      <div className=\"grid-board\">{grid}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectScore } from './scoreSlice';\r\n\r\nexport default function Score() {\r\n  const score = useSelector(selectScore);\r\n  return <h1>{score}</h1>;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectGrid, createNewArray } from '../grid/gridSlice';\r\nimport { selectScore, resetValue } from '../score/scoreSlice';\r\n\r\nexport default function Gameover() {\r\n  const dispatch = useDispatch();\r\n  const array = useSelector(selectGrid);\r\n  const score = useSelector(selectScore);\r\n  const [possibleMove, setPossibleMove] = useState(true);\r\n\r\n  const calculateIfGameOver = (array) => {\r\n    for (let row = 0; row < 5; row++) {\r\n      for (let col = 0; col < 5; col++) {\r\n        if (row + 1 < 5 ? array[row][col] === array[row + 1][col] : false)\r\n          return true;\r\n        if (row - 1 > -1 ? array[row][col] === array[row - 1][col] : false)\r\n          return true;\r\n        if (col + 1 < 5 ? array[row][col] === array[row][col + 1] : false)\r\n          return true;\r\n        if (col - 1 > -1 ? array[row][col] === array[row][col - 1] : false)\r\n          return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const handleClick = () => {\r\n    dispatch(resetValue());\r\n    dispatch(createNewArray());\r\n  };\r\n\r\n  useEffect(() => {\r\n    setPossibleMove(calculateIfGameOver(array));\r\n  }, [array]);\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        !possibleMove && score !== 0 ? 'gameover-panel' : 'gameover-panel-hide'\r\n      }\r\n    >\r\n      {!possibleMove && score !== 0 && (\r\n        <h1 className=\"gameover-h\">\r\n          Game over\r\n          <br />\r\n          Your score: {score}\r\n        </h1>\r\n      )}\r\n      <button className=\"play-again-btn\" onClick={handleClick}>\r\n        Play Again!\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Grid from './features/grid/Grid';\r\nimport Score from './features/score/Score';\r\nimport Gameover from './features/gameover/Gameover';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Score />\r\n      <Grid />\r\n      <Gameover />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport gridReducer from '../features/grid/gridSlice';\r\nimport scoreReducer from '../features/score/scoreSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    grid: gridReducer,\r\n    score: scoreReducer,\r\n  },\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './index.css';\r\n\r\nimport App from './App';\r\nimport store from './app/store';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}